{
	"info": {
		"_postman_id": "cab34e8f-89a3-4ba0-a8cf-29505480a7d3",
		"name": "Proveedor Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Crear un proveedor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "994e2ca7-013c-4764-8837-883e6ede1c26",
						"type": "text/javascript",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setGlobalVariable(\"new_nombre_proveedor\",data.nombre);",
							"tests[\"no genera error en el Post\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\":\"Gabriel\",\n    \"contrasenia\":\"123456789\",\n    \"calificacion\":10,\n    \"agenda\":{}\n}"
				},
				"url": {
					"raw": "http://localhost:8080/s4_PartyServices-api/api/proveedor",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"s4_PartyServices-api",
						"api",
						"proveedor"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear un proveedor con el mismo nombre que otro ya creado.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "254ef2f7-af2b-4450-b316-9f6d9843a6ea",
						"type": "text/javascript",
						"exec": [
							"tests[\"No crea con el mismo nombre\"] = responseCode.code === 412;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"Ya existe un proveedor con el nombre\");"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\":\"Gabriel\",\n    \"contrasenia\":\"123456789\",\n    \"calificacion\":10,\n    \"agenda\":{}\n}"
				},
				"url": {
					"raw": "http://localhost:8080/s4_PartyServices-api/api/proveedor",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"s4_PartyServices-api",
						"api",
						"proveedor"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear un proveedor con contraseña nula.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0f993a43-f02c-4819-9562-3c003d94fa79",
						"type": "text/javascript",
						"exec": [
							"tests[\"No crea con el mismo nombre\"] = responseCode.code === 412;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"la contraseña no puede ser null\");"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\":\"Gabriel_S\",\n    \"calificacion\":10,\n    \"agenda\":{}\n}"
				},
				"url": {
					"raw": "http://localhost:8080/s4_PartyServices-api/api/proveedor",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"s4_PartyServices-api",
						"api",
						"proveedor"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear un proveedor con contraseña con menos de 8 caracteres",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "54af7ac3-1ee2-460a-a812-1d44dd7be4ee",
						"type": "text/javascript",
						"exec": [
							"tests[\"No crea con el mismo nombre\"] = responseCode.code === 412;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"la contraseña debe tener más de 8 caracteres\");"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\":\"Gabriel_S2\",\n\t\"contrasenia\":\"123\",\n    \"calificacion\":10,\n    \"agenda\":{}\n}"
				},
				"url": {
					"raw": "http://localhost:8080/s4_PartyServices-api/api/proveedor",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"s4_PartyServices-api",
						"api",
						"proveedor"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear un proveedor con contraseña igual al nombre del usuario.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "570ed622-414d-4749-849e-78e1563acebb",
						"type": "text/javascript",
						"exec": [
							"tests[\"No crea con el mismo nombre\"] = responseCode.code === 412;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"la contraseña no puede ser igual al nombre de Usuario\");"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\":\"Gabriel_S3\",\n    \"contrasenia\":\"Gabriel_S3\",\n    \"calificacion\":10,\n    \"agenda\":{}\n}"
				},
				"url": {
					"raw": "http://localhost:8080/s4_PartyServices-api/api/proveedor",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"s4_PartyServices-api",
						"api",
						"proveedor"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener todos los proveedores",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aba7b3cf-3b18-4c5b-827a-cc4278e6799c",
						"type": "text/javascript",
						"exec": [
							"var data= JSON.parse(responseBody);",
							"tests[\"No genera error en el Get all\"] = responseCode.code === 200;",
							"tests[\"proveedores count\"] = data.length >= 0;"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://localhost:8080/s4_PartyServices-api/api/proveedor",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"s4_PartyServices-api",
						"api",
						"proveedor"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener un proveedor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f0024d8a-2f66-49e9-94ff-3e8fd7478d9a",
						"type": "text/javascript",
						"exec": [
							"console.log(responseBody);",
							"var data = JSON.parse(responseBody);",
							"tests[\"No genera error en el Get\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://localhost:8080/s4_PartyServices-api/api/proveedor/{{new_id_proveedor}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"s4_PartyServices-api",
						"api",
						"proveedor",
						"{{new_id_proveedor}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener un proveedor que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3e1e6315-f16f-41ac-8fdd-6cbbfd02d407",
						"type": "text/javascript",
						"exec": [
							"tests[\"No consulta con id que no existe\"] = responseCode.code === 404; ",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"El recurso /proveedores/0 no existe.\");"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://localhost:8080/s4_PartyServices-api/api/proveedor/0",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"s4_PartyServices-api",
						"api",
						"proveedor",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar un proveedor que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d7eb1020-692e-484c-bf38-f91d114cfd94",
						"type": "text/javascript",
						"exec": [
							"tests[\"No actualiza con id que no existe\"] = responseCode.code === 404;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"El recurso /proveedores/0 no existe.\");"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\":\"Gabriel\",\n    \"contrasenia\":\"123456789\",\n    \"calificacion\":10,\n    \"agenda\":{}\n}"
				},
				"url": {
					"raw": "http://localhost:8080/s4_PartyServices-api/api/proveedor/0",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"s4_PartyServices-api",
						"api",
						"proveedor",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar un proveedor ",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "75585018-e335-45e2-8f2a-27929a7c8ddb",
						"type": "text/javascript",
						"exec": [
							"console.log(responseBody);",
							"var data = JSON.parse(responseBody);",
							"tests[\"No genera error en el Put\"] = responseCode.code === 200;"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\":\"Gabriel_2\",\n    \"contrasenia\":\"123456789\",\n    \"calificacion\":7,\n    \"agenda\":{}\n}"
				},
				"url": {
					"raw": "http://localhost:8080/s4_PartyServices-api/api/proveedor/{{new_id_proveedor}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"s4_PartyServices-api",
						"api",
						"proveedor",
						"{{new_id_proveedor}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar un proveedor  con contraseña nula",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dede05e9-f0a5-45b5-9fd4-0cd28e3ea827",
						"type": "text/javascript",
						"exec": [
							"tests[\"No crea con ISBN invalido\"] = responseCode.code === 412;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"la contraseña debe tener más de 8 caracteres y máximo 35 caracteres\");"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\":\"Gabriel\",\n    \"contrasenia\":\"\",\n    \"calificacion\":10,\n    \"agenda\":{}\n}"
				},
				"url": {
					"raw": "http://localhost:8080/s4_PartyServices-api/api/proveedor/{{new_id_proveedor}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"s4_PartyServices-api",
						"api",
						"proveedor",
						"{{new_id_proveedor}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar un proveedor  con contraseña con menos de 8 caracteres",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d2a5542c-1bf4-46d9-bd1a-8c18da7981be",
						"type": "text/javascript",
						"exec": [
							"tests[\"No crea con ISBN invalido\"] = responseCode.code === 412;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"la contraseña debe tener más de 8 caracteres y máximo 35 caracteres\");"
						]
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"nombre\":\"Gabriel\",\n    \"contrasenia\":\"asd\",\n    \"calificacion\":10,\n    \"agenda\":{}\n}"
				},
				"url": {
					"raw": "http://localhost:8080/s4_PartyServices-api/api/proveedor/{{new_id_proveedor}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"s4_PartyServices-api",
						"api",
						"proveedor",
						"{{new_id_proveedor}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar proveedor",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7c6b4f32-8cda-4d25-84c8-706c64350cb7",
						"type": "text/javascript",
						"exec": [
							"tests[\"No genera error en el Delete\"] = responseCode.code === 204;"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://localhost:8080/s4_PartyServices-api/api/proveedor/{{new_id_proveedor}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"s4_PartyServices-api",
						"api",
						"proveedor",
						"{{new_id_proveedor}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar proveedor que no existe",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d3e8536d-d0cb-4896-a0f0-f181a3839ecc",
						"type": "text/javascript",
						"exec": [
							"tests[\"No borra con id que no existe\"] = responseCode.code === 404;",
							"tests[\"Mensaje correcto de error\"] = responseBody.has(\"El recurso /authors/0 no existe.\");"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {},
				"url": {
					"raw": "http://localhost:8080/s4_PartyServices-api/api/proveedor/0",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"s4_PartyServices-api",
						"api",
						"proveedor",
						"0"
					]
				}
			},
			"response": []
		}
	]
}